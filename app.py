import streamlit as st
from autogluon.tabular import TabularPredictor
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay, roc_curve, auc
import os

st.set_page_config(page_title="AutoML –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è", layout="wide")
st.title('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∑ AutoGluon')

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ ---
def save_predictor(predictor, path='AutogluonModels/'):
    predictor.save(path)

def load_predictor(path='AutogluonModels/'):
    if os.path.exists(path):
        try:
            predictor = TabularPredictor.load(path)
            return predictor
        except Exception:
            return None
    return None

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó ---
if 'predictor' not in st.session_state:
    st.session_state['predictor'] = None
if 'df' not in st.session_state:
    st.session_state['df'] = None
if 'target_column' not in st.session_state:
    st.session_state['target_column'] = None

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ---
uploaded_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª (UTF-8)", type=['csv'])

if uploaded_file is not None:
    try:
        df = pd.read_csv(uploaded_file)
        st.session_state['df'] = df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        st.stop()

if st.session_state['df'] is not None:
    df = st.session_state['df']
    st.success("–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    st.write("–¢–∏–ø–∏ –∫–æ–ª–æ–Ω–æ–∫:")
    st.write(df.dtypes)

    # --- –í–∏–±—ñ—Ä —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó ---
    possible_targets = df.columns.tolist()
    target_column = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –∑–º—ñ–Ω–Ω—É (target):", possible_targets)
    st.session_state['target_column'] = target_column

    # --- –†–æ–∑–±–∏—Ç—Ç—è –Ω–∞ train/test ---
    train_data = df.sample(frac=0.8, random_state=42)
    test_data = df.drop(train_data.index)

    # --- –ù–∞–≤—á–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ ---
    if st.button('–ù–∞–≤—á–∏—Ç–∏ –Ω–æ–≤—É –º–æ–¥–µ–ª—å'):
        with st.spinner("–ù–∞–≤—á–∞—î–º–æ –º–æ–¥–µ–ª—å..."):
            predictor = TabularPredictor(label=target_column, path='AutogluonModels/').fit(train_data)
            st.session_state['predictor'] = predictor
            save_predictor(predictor)
            st.success("–ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")
    if predictor is not None:
        leaderboard_df = predictor.leaderboard(silent=True)
        available_columns = leaderboard_df.columns.tolist()
        display_columns = [col for col in ['model', 'score_val', 'fit_time', 'predict_time'] if col in available_columns]

        st.markdown("### üìä –¢–∞–±–ª–∏—Ü—è –º–æ–¥–µ–ª–µ–π (Leaderboard):")
        st.dataframe(leaderboard_df[display_columns])

        best_model_name = predictor.get_model_best()
        st.markdown(f"### –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å: `{best_model_name}`")
else:
        st.info("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á—ñ—Ç—å –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –º–æ–¥–µ–ª—å.")


# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –º–æ–¥–µ–ª—ñ ---
if st.button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –º–æ–¥–µ–ª—å"):
    predictor = load_predictor('AutogluonModels/')
    if predictor:
        st.session_state['predictor'] = predictor
        st.success("–ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞!")

        leaderboard_df = predictor.leaderboard(silent=True)
        st.markdown("### üìä –¢–∞–±–ª–∏—Ü—è –º–æ–¥–µ–ª–µ–π (Leaderboard):")
        st.dataframe(leaderboard_df[['model', 'score_val', 'fit_time', 'predict_time']])
    else:
        st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥—É AutogluonModels.")

# --- –†–æ–±–æ—Ç–∞ –∑ –Ω–∞–≤—á–µ–Ω–æ—é –º–æ–¥–µ–ª–ª—é ---
if st.session_state['predictor'] is not None and st.session_state['df'] is not None and st.session_state['target_column'] is not None:
    predictor = st.session_state['predictor']
    df = st.session_state['df']
    target_column = st.session_state['target_column']

    test_data = df.drop(df.sample(frac=0.8, random_state=42).index)
    y_true = test_data[target_column]
    y_pred = predictor.predict(test_data)
    acc = accuracy_score(y_true, y_pred)

    st.markdown(f"## –ú–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ")
    st.write(f"**Accuracy:** {acc:.3f}")

    # ROC-AUC –ª–∏—à–µ –¥–ª—è –¥–≤–æ–∫–ª–∞—Å–æ–≤–æ—ó –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ –∫–ª–∞—Å–∞–º–∏ 0 —ñ 1
    if set(y_true.unique()) == {0, 1}:
        y_proba = predictor.predict_proba(test_data)[1]  # –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∫–ª–∞—Å—É 1
        fpr, tpr, _ = roc_curve(y_true, y_proba)
        roc_auc = auc(fpr, tpr)
        st.write(f"**ROC-AUC:** {roc_auc:.3f}")

        fig_roc, ax_roc = plt.subplots()
        ax_roc.plot(fpr, tpr, label=f'ROC –∫—Ä–∏–≤–∞ (AUC = {roc_auc:.3f})')
        ax_roc.plot([0, 1], [0, 1], linestyle='--', color='grey')
        ax_roc.set_xlabel('FPR')
        ax_roc.set_ylabel('TPR')
        ax_roc.legend()
        st.pyplot(fig_roc)
    else:
        st.info("–î–ª—è ROC-AUC –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–ª–∞—Å–∏ 0 —ñ 1.")

    # –ú–∞—Ç—Ä–∏—Ü—è –ø–ª—É—Ç–∞–Ω–∏–Ω–∏
    cm = confusion_matrix(y_true, y_pred)
    fig_cm, ax_cm = plt.subplots()
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    disp.plot(ax=ax_cm)
    st.pyplot(fig_cm)

    # --- –ü—Ä–æ–≥–Ω–æ–∑ ---
    st.markdown("---")
    st.subheader("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –æ–∑–Ω–∞–∫ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É")
    features = [col for col in df.columns if col != target_column]
    input_dict = {}

    for feat in features:
        st.markdown(f"**{feat}**")
        if pd.api.types.is_numeric_dtype(df[feat]):
            min_val = float(df[feat].min())
            max_val = float(df[feat].max())
            median_val = float(df[feat].median())
            input_val = st.slider(f"{feat}", min_value=min_val, max_value=max_val, value=median_val)
            st.markdown(f"–í–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: `{input_val}`")
            input_dict[feat] = input_val
        else:
            options = df[feat].dropna().unique().tolist()
            input_val = st.selectbox(f"{feat}", options)
            st.markdown(f"–û–±—Ä–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: `{input_val}`")
            input_dict[feat] = input_val

    input_df = pd.DataFrame([input_dict])

    if st.button('–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏'):
        pred = predictor.predict(input_df)[0]
        st.write(f"### –ü—Ä–æ–≥–Ω–æ–∑: `{pred}`")

else:
    if st.session_state['df'] is None:
        st.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç.")
    elif st.session_state['target_column'] is None:
        st.info("–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –∑–º—ñ–Ω–Ω—É.")
    elif st.session_state['predictor'] is None:
        st.info("–ù–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–±–µ—Ä–µ–∂–µ–Ω—É.")

# --- –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —É —Å–∞–π–¥–±–∞—Ä—ñ ---
st.sidebar.title("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è")
st.sidebar.write("""
1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª (UTF-8)
2. –û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–Ω–∫—É —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó
3. –ù–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–±–µ—Ä–µ–∂–µ–Ω—É
4. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ —Ç–∞ —Ç–∞–±–ª–∏—Ü—é –º–æ–¥–µ–ª–µ–π
5. –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
6. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
""")
st.sidebar.markdown("---")
